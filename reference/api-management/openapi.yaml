openapi: 3.0.2
info:
  title: API Management
  version: '1.0'
  contact:
    name: Axway Support
    email: support@axway.com
  license:
    name: Copyright Axway 2019. All rights reserved.
  description: API Management in Amplify Central.
servers:
  - url: 'https://apicentral.axway.com/api/mgmt/v1alpha1'
    description: Amplify Central
paths:
  /environments:
    get:
      summary: Get environments.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getEnvironments
      description: Get environments.
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/countParam'
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/sortParam'
      tags:
        - environment
    post:
      summary: Create an environment.
      responses:
        '201':
          description: Created
          headers:
            location:
              schema:
                type: string
              description: The location of the created environment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: createEnvironment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
      description: Create an environment.
      tags:
        - environment
  /graphql:
    get:
      summary: GraphQL query endpoint.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                  data:
                    type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: 'The GraphQL query. See https://graphql.org/learn/serving-over-http/#get-request.'
          required: true
      description: GraphQL query endpoint.
      tags:
        - graphql
      operationId: queryGraphqlInline
    post:
      summary: GraphQL query endpoint.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                  errors:
                    type: array
                    items:
                      type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                operationName:
                  type: string
                variables:
                  type: object
        description: 'The GraphQL query. See https://graphql.org/learn/serving-over-http/#post-request.'
      description: GraphQL query endpoint.
      tags:
        - graphql
      operationId: queryGraphql
  /apiservices:
    get:
      summary: Get API Services.
      tags:
        - apiservice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIService'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      description: Get API Services.
      operationId: getAPIServices
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/countParam'
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/sortParam'
    post:
      summary: Create an API Service.
      responses:
        '201':
          description: Created
          headers:
            location:
              schema:
                type: string
              description: The location of the created API Service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIService'
      operationId: createAPIService
      tags:
        - apiservice
      description: Create an API Service.
  '/apiservices/{apiserviceId}':
    parameters:
      - name: apiserviceId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get an API Service.
      tags:
        - apiservice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getAPIService
      description: Get an API Service.
    put:
      summary: Update an API Service.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIService'
      tags:
        - apiservice
      operationId: updateAPIService
      description: Update an API Service.
    delete:
      summary: Delete an API Service.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      description: Delete an API Service.
      operationId: deleteAPIService
      tags:
        - apiservice
  '/apiservices/{apiserviceId}/instances':
    get:
      summary: Get API Service Instances.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIServiceInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getAPIServiceInstances
      description: Get API Service Instances.
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/countParam'
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/sortParam'
      tags:
        - apiservice
        - apiserviceinstance
    post:
      summary: Create an API Service Instance.
      responses:
        '201':
          description: Created
          headers:
            location:
              schema:
                type: string
              description: The location of the created API Service Instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIServiceInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIServiceInstance'
      tags:
        - apiservice
        - apiserviceinstance
      description: Create an API Service Instance.
      operationId: createAPIServiceInstance
    parameters:
      - name: apiserviceId
        in: path
        required: true
        schema:
          type: string
  '/apiservices/{apiserviceId}/instances/{instanceId}':
    parameters:
      - name: apiserviceId
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get an API Service Instance.
      tags:
        - apiservice
        - apiserviceinstance
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIServiceInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getAPIServiceInstance
      description: Get an API Service Instance.
    put:
      summary: Update an API Service Instance.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIServiceInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIServiceInstance'
      tags:
        - apiservice
        - apiserviceinstance
      operationId: updateAPIServiceInstance
      description: Update an API Service Instance.
    delete:
      summary: Delete an API Service Instance.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - apiservice
        - apiserviceinstance
      description: Delete an API Service Instance.
      operationId: deleteAPIServiceInstance
  '/apiservices/{apiserviceId}/instances/{instanceId}/publish':
    parameters:
      - name: apiserviceId
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
    put:
      summary: Publish an API Service Instance.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - apiservice
        - apiserviceinstance
      operationId: publishAPIServiceInstance
      description: Publish an API Service Instance.
    delete:
      summary: Unpublish an API Service Instance.
      description: Unpublish an API Service Instance.
      operationId: unpublishAPIServiceInstance
      tags:
        - apiservice
        - apiserviceinstance
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/apiservices/{apiserviceId}/revisions/{revisionId}':
    parameters:
      - name: apiserviceId
        in: path
        required: true
        schema:
          type: string
      - name: revisionId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get an API Service Revision.
      tags:
        - apiservice
        - apiserviceRevision
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIServiceRevision'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getAPIServiceRevision
      description: Get an API Service Revision.
    put:
      summary: Update an API Service Revision.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIServiceRevision'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - apiservice
        - apiservicerevision
      operationId: updateAPIServiceRevision
      description: Update an API Service Revision.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIServiceRevision'
    delete:
      summary: Delete an API Service Revision.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      description: Delete an API Service Revision.
      operationId: deleteAPIServiceRevision
      tags:
        - apiservice
        - apiservicerevision
  '/apiservices/{apiserviceId}/revisions':
    get:
      summary: Get API Service Revisions.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIServiceRevision'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/countParam'
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/sortParam'
      tags:
        - apiservice
        - apiservicerevision
      operationId: getAPIServiceRevisions
      description: Get API Service Revision.
    post:
      summary: Create an API Service Revision.
      responses:
        '201':
          description: Created
          headers:
            location:
              schema:
                type: string
              description: The location of the created API Service Revision.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIServiceRevision'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIServiceRevision'
      operationId: createAPIServiceRevision
      tags:
        - apiservice
        - apiservicerevision
      description: Create an API Service Revision.
    parameters:
      - name: apiserviceId
        in: path
        required: true
        schema:
          type: string
  '/environments/{environmentId}':
    parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get an environment.
      tags:
        - environment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getEnvironment
      description: Get an environment.
    put:
      summary: Update an environment.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - environment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
      operationId: updateEnvironment
      description: Update an environment.
    delete:
      summary: Delete an environment.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      description: Delete an environment.
      operationId: deleteEnvironment
      tags:
        - environment
components:
  schemas:
    AuditMetadata:
      title: AuditMetadata
      description: Read-only metadata for the record.
      properties:
        createTimestamp:
          type: string
          format: date-time
          description: The creation time.
        createUserId:
          type: string
          description: Id of the user that created the entity.
        modifyTimestamp:
          type: string
          format: date-time
          description: The last modification time.
        modifyUserId:
          type: string
          description: Id of the user that last modified the entity.
      readOnly: true
      type: object
    Environment:
      title: Environment
      description: An environment contains API Services.
      type: object
      allOf:
        - $ref: '#/components/schemas/OwnedResource'
        - type: object
          properties:
            spec:
              $ref: '#/components/schemas/EnvironmentSpec'
          required:
            - spec
    APIService:
      title: API Service
      description: An API Service describes an API that is consumable.
      allOf:
        - $ref: '#/components/schemas/Resource'
        - properties:
            spec:
              $ref: '#/components/schemas/APIServiceSpec'
          required:
            - spec
      type: object
    APIServiceInstance:
      title: API Service Instance
      description: An instance an API Service Revision.
      type: object
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            spec:
              $ref: '#/components/schemas/APIServiceInstanceSpec'
          required:
            - spec
    APIDefinition:
      title: API Definition
      description: An API definition.
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            spec:
              $ref: '#/components/schemas/APIDefinitionSpec'
          required:
            - spec
      type: object
    Endpoint:
      type: object
      description: The endpoint where the API Service is deployed.
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            spec:
              $ref: '#/components/schemas/EndpointSpec'
          required:
            - spec
      title: Endpoint
    EnvironmentVariables:
      title: EnvironmentVariables
      description: Variables for use in environment substitutions.
      additionalProperties:
        oneOf:
          - type: string
          - type: integer
          - type: boolean
      type: object
    Attributes:
      title: Attributes
      description: Custom attributes added to objects.
      additionalProperties:
        oneOf:
          - type: string
          - type: integer
          - type: boolean
          - type: array
            items: {}
    APIServiceRevision:
      title: API Service REevision
      description: A revision of the API Service.
      type: object
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            spec:
              $ref: '#/components/schemas/APIServiceRevisionSpec'
          required:
            - spec
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              status:
                type: integer
              title:
                type: string
              detail:
                type: string
              meta:
                type: object
                properties:
                  instanceId:
                    type: string
                additionalProperties: true
            additionalProperties: true
      additionalProperties: true
      title: Error Response
      description: Detail for standard error responses.
    Resource:
      title: Resource
      description: The base content for all resources.
      type: object
      properties:
        id:
          type: string
          readOnly: true
        metadata:
          $ref: '#/components/schemas/AuditMetadata'
        attributes:
          $ref: '#/components/schemas/Attributes'
        tags:
          type: array
          description: List of tags
          items:
            type: string
    OwnedResource:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - properties:
            owningTeamId:
              type: string
              description: The id of the owning team for this environment.
    EndpointSpec:
      properties:
        host:
          type: string
        port:
          type: integer
        protocol:
          type: string
        selector:
          type: object
          properties:
            type:
              type: string
            value: {}
      required:
        - host
        - port
    APIDefinitionSpec:
      properties:
        type:
          type: string
        definition:
          oneOf:
            - type: object
            - type: string
              format: binary
      additionalProperties: true
    APIServiceInstanceSpec:
      type: object
      properties:
        endpoint:
          oneOf:
            - type: array
              items:
                $ref: '#/components/schemas/Endpoint'
            - $ref: '#/components/schemas/Endpoint'
        revisionId:
          type: string
        status: {}
    APIServiceRevisionSpec:
      type: object
      properties:
        name:
          type: string
        api:
          oneOf:
            - type: array
              items:
                $ref: '#/components/schemas/APIDefinition'
            - $ref: '#/components/schemas/APIDefinition'
        proxy: {}
      required:
        - name
    APIServiceSpec:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
        description:
          type: string
        instances:
          type: array
          items:
            $ref: '#/components/schemas/APIServiceInstance'
          description: The API Service Instances in this API Service.
        revisions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/APIServiceRevision'
          description: The API Service Revisions in this API Service.
        environmentId:
          type: string
      required:
        - environmentId
    EnvironmentSpec:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        icon:
          type: string
          format: binary
        variables:
          $ref: '#/components/schemas/EnvironmentVariables'
      required:
        - name
  securitySchemes:
    token:
      type: http
      scheme: Bearer
      description: Authenticated platform bearer token.
  parameters:
    offsetParam:
      name: offset
      in: query
      description: The offset index into the result set to start returning results from.
      required: false
      schema:
        type: integer
        default: 0
    countParam:
      name: count
      in: query
      description: The maximum number of entities to return.
      required: false
      schema:
        type: integer
        default: 20
    pageNumberParam:
      name: page
      in: query
      description: 'The offset starting page number in the result set to start returning results from, starts at 1.'
      required: false
      schema:
        type: integer
        default: 1
    pageSizeParam:
      name: pageSize
      in: query
      description: The number of entities allowed in a page.
      required: false
      schema:
        type: integer
        default: 20
    sortParam:
      name: sort
      in: query
      description: 'The field to sort result sets by, in ASC or DESC order.'
      required: false
      schema:
        type: array
        items:
          type: string
  responses:
    InternalServerError:
      description: Unexpected internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Request conflicts with the current state of the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: The resource specified could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized. A valid authorization header was not provided with the request to authenticate.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Failed to validate request parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: 'Forbidden, the user does not have the correct permissions to call this API.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
